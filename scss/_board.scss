// define variablesc
$boardSize: 1000px;
// $borderSize:1px;
$borderSize:$boardSize*.001;
$propWidth: ($boardSize * .08)-($borderSize*2);
$propHeight: ($boardSize * .14) - ($borderSize*2);
$propBannerHeight:($propHeight)*.2;
$pictureSize:$propHeight * .4;
$leftColRightMove:($boardSize)*.290;
$leftColTopMove:($boardSize)*.290;
$rightColRightMove:($boardSize)*-.290;
$rightColTopMove:($boardSize)*.150;
$flippedTopMove:($boardSize)*.440;



//This mixin will draw a square. You send the size of all sides and
// the kind of border that you would like.
@mixin drawSquare($size, $border)
{
  width:$size;
  height:$size;
  border:$border;
  border-image-repeat:none;
}

// This mixin will draw a rectangle. You send the size of the sides
// and the top/bottom and the type of border you would like.
@mixin drawRect($top, $side, $border:none)
{
  width:$top;
  height:$side;
  border:$border;
}

//draw the main board
#board
{
  @include drawSquare($boardSize, 2px solid black);
  margin:auto;
  background-color:$boardSpace;


  .cornerProp
  {
    @include drawSquare($propHeight, $borderSize solid black);
    float:left
  }

  .uprightProp
  {
    @include drawRect($propWidth, $propHeight, $borderSize solid black);
    border-bottom:2px solid black;
    float:left;

    // attributes shared by all regular purchaseable/mortgageable properties.
    .regularProperties
    {
      @include drawRect($propWidth - 1, $propBannerHeight, 1px solid black);
      border-bottom:2px solid black;
    }

    // set all colors for the banners on regular properties
    .purple{background-color:$propertyPurple;}
    .teal{background-color:$propertyTeal;}
    .orange{background-color:$propertyOrange;}
    .red{background-color:$propertyRed;}
    .yellow{background-color:$propertyYellow;}
    .lightGreen{background-color:$propertyLightGreen;}
    .green{background-color:$propertyGreen;}
    .blue{background-color:$propertyBlue;}
  }

  .propPic
  {
    @include drawSquare($pictureSize, none);
    position:relative;
    $nudge:($propWidth - $pictureSize) / 2;
    left:$nudge;
    top:$nudge;
    repeat:no-repeat;
    background-size:cover;
  }

  .caption
  {
    color:$bgColor;
    font-size:$propHeight * .05;
    width:$propWidth;
    height:$propHeight * .1;
    position:relative;
    $nudge:($propWidth - $pictureSize) / 2;
    // left:$nudge;
    top:$nudge;
    font-family:$font;
    margin-top:$nudge*.6;
    text-align:center;
  }

  .price
  {
    width:$propWidth;
    position:relative;
    $nudge:($propWidth - $pictureSize) / 2;
    margin:auto;
    text-align:center;

    // left:$nudge;
    top:$nudge;
  }

  // set the images for properties.
  #carter{background-image:url('../images/carter.png');}
  #chicks{background-image:url('../images/chicks.png');}


  .rotateRight
  {
    -webkit-transform:rotate(90deg);
  }

  .rotateLeft
  {
    -webkit-transform:rotate(270deg);
    position:relative;
    top:-30px;
    left:30px;
  }

  .upsideDown
  {
    -webkit-transform:rotate(180deg);
  }

  .horizontalRow
  {
    width:$boardSize;
    height:$propHeight+($borderSize*2);
    float:left;
    div
    {
      float:left;
    }
  }



  .column
  {
    width:($propWidth*9)+($borderSize*18);
    height:$propHeight+($borderSize*2);
  }

  #leftCol
  {
    float:left;
    -webkit-transform:rotate(270deg);
    position:relative;
    right:$leftColRightMove;
    top:$leftColTopMove;
  }

  #rightCol
  {
    -webkit-transform:rotate(90deg);
    float:right;
    position:relative;
    right:$rightColRightMove;
    top:$rightColTopMove;
  }

  .flipped
  {
    -webkit-transform:rotate(180deg);
    position:relative;
    top:$flippedTopMove;
  }


}



//draw a corner square